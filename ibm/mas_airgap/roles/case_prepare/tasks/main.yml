---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if required properties are not provided"
  assert:
    that:
      - case_name is defined and case_name != ""
      - case_bundle_dir is defined and case_bundle_dir != ""
    fail_msg: "One or more required properties are not defined"


# 2. Check for required software
# -----------------------------------------------------------------------------
- name: "Test if cloudctl is installed"
  shell: cloudctl version
  register: _cloudctl_version
  ignore_errors: true

- name: "Fail if cloudctl is not installed"
  assert:
    that: ( _cloudctl_version['rc'] == 0 )
    fail_msg: "cloudctl tool must be installed."


# 3. Debug
# -----------------------------------------------------------------------------
- name: "CASE configuration"
  debug:
    msg:
      - "Case Name ............ {{ case_name }}"
      - "Case Version ......... {{ case_version }}"
      - "Case Bundle Directory. {{ case_bundle_dir }}"


# 4. Prepare the case directory
# -----------------------------------------------------------------------------
# 4.1 Delete the case sub-directory
- name: "Empty CASE Directory ({{ case_dir }})"
  when:
    - case_source is defined
    - case_source is match("http.*\.tgz")
  vars:
    case_dir: "{{ case_bundle_dir }}/case"
  ansible.builtin.file:
    path: "{{ case_dir }}"
    state: absent

# 4.2 (Re-)Create the case sub-directory
- name: "Create CASE Directory ({{ case_dir }})"
  vars:
    case_dir: "{{ case_bundle_dir }}/case"
  ansible.builtin.file:
    path: "{{ case_dir }}"
    state: directory

# 4.3 Download the CASE Archive
- name: "Download CASE Archive to {{ case_bundle_dir }}"
  when:
    - case_source is defined
    - case_source is match("http.*\.tgz")
  get_url:
    url: "{{ case_source }}"
    validate_certs: false
    dest: "{{ case_bundle_dir }}"
  register: _case_download

# 4.4 Extract the CASE Archive from the bundle
- name: "Extract CASE Archive to {{ case_bundle_dir }}/case"
  when:
    - case_source is defined
    - case_source is match("http.*\.tgz")
  shell: |
    tar -xzf "{{ _case_download.dest }}" -C "{{ case_dir }}"
  vars:
    case_dir: "{{ case_bundle_dir }}/case"
  register: _case_unzip


# 5. Process CASE to configure image mirroring
# -----------------------------------------------------------------------------
- name: "Save Case to {{ case_archive_dir }}"
  shell: >
    cloudctl case save \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --outputdir {{ case_archive_dir }} \
      --tolerance 1
  register: saveCaseResult

# If testing a development build, we need to modify the saved reference images (change to artifactory and set the digests etc).
- name: Configure Case for Development
  when:
    - dev_overrides is defined
    - not dev_overrides == ""
  include_tasks: "tasks/setup-development-airgap.yml"
# TBD - It would be nicer to set up case resolvers to have the same effect.


# 6. Remove excluded images
# -----------------------------------------------------------------------------
# Some CASE bundles define images that we don't want to mirror, so delete the excluded image files.
- name: Delete excluded images
  when:
    - exclude_images is defined
    - exclude_images | length > 0
  shell: rm {{ case_archive_dir }}/{{ item }}*-images.csv
  register: excludeImagesResult
  #loop: "{{ excludeImages.split(',') }}"
  loop: "{{ exclude_images }}"
