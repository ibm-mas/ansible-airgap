---
# Configure the OpenShift Internal Registry so it can be used to mirror container image
# --------------------------------------------------------------------------------------

- name: Set registry facts
  set_fact:
    temp_file_prefix: "/tmp/registry/"
    registry_user: "regUser"
    registry_password: "regPasswd"
    registry_namespace: "docker-registry"
    dockerio_username: "{{ lookup('env', 'DOCKERIO_USERNAME') }}"
    dockerio_password: "{{ lookup('env', 'DOCKERIO_PASSWORD') }}"

- name: Check if registry is already configured
  community.kubernetes.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: docker-registry-route
    namespace: "{{ registry_namespace }}"
  register: registry_route_info

# 3. Create files for authentication
# --------------------------------
- name: "Create Directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ temp_file_prefix }}/certs"
    - "{{ temp_file_prefix }}/auth"
  when: registry_route_info.resources | length == 0

- name: "Generate CA Key"
  shell: |
    openssl genrsa -out "{{ temp_file_prefix }}/certs/ca.key" 4096
  when: registry_route_info.resources | length == 0

- name: "Generate CA Cert"
  shell: |
    openssl req -new -x509 -days 365 -sha256 -subj "{{ REGISTRY_TLS_CA_SUBJECT }}" -key "{{ temp_file_prefix }}/certs/ca.key" -out "{{ temp_file_prefix }}/certs/ca.crt"
  vars:
    REGISTRY_TLS_CA_SUBJECT: "/C=US/ST=New York/L=Armonk/O=IBM Cloud Pak/CN=IBM Cloud Pak Root CA"
  when: registry_route_info.resources | length == 0

- name: "Generate Server Key"
  shell: |
    openssl req -newkey rsa:4096 -nodes -subj "{{ REGISTRY_TLS_CERT_SUBJECT }}" -keyout "{{ temp_file_prefix }}/certs/server.key" -out "{{ temp_file_prefix }}/certs/server.csr"
  vars:
    REGISTRY_TLS_CERT_SUBJECT: "/C=US/ST=New York/L=Armonk/O=IBM Cloud Pak/CN=docker-registry.{{ cluster_url }}"
  when: registry_route_info.resources | length == 0

- name: "Create TLS Certs"
  shell: |
    openssl x509 -req -days 365 -sha256 -extensions "subjectAltName=DNS:docker-registry.{{ cluster_url }},DNS:docker-registry.docker-registry.svc" -CAcreateserial -CA "{{ temp_file_prefix }}/certs/ca.crt" -CAkey "{{ temp_file_prefix }}//certs/ca.key" -in "{{ temp_file_prefix }}/certs/server.csr" -out "{{ temp_file_prefix }}/certs/server.crt"
  when: registry_route_info.resources | length == 0

- name: "Create htpasswd"
  shell: |
    docker run --rm --entrypoint htpasswd registry:2.6.2 -Bbn "{{ registry_user }}" "{{ registry_password }}" > "{{ temp_file_prefix }}/auth/htpasswd"
  when: registry_route_info.resources | length == 0

# Create the target namespace for the registry
- name: Create Registry Namespace
  vars:
    namespace: "{{ registry_namespace }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/docker-registry/namespace.yaml') }}"
  when: registry_route_info.resources | length == 0

# Create  secret to mount certificates
- name: "Create new TLS secret"
  vars:
    crt_file: "{{ temp_file_prefix }}/certs/server.crt"
    key_file: "{{ temp_file_prefix }}/certs/server.key"
    registry_crt: "{{ lookup('file', crt_file) }}"
    registry_key: "{{ lookup('file', key_file) }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/docker-registry/secret_tls.yml') }}"
  when: registry_route_info.resources | length == 0


# Create  auth secret
- name: "Create new Auth secret"
  vars:
    htpasswd_file: "{{ temp_file_prefix }}/auth//htpasswd"
    htpasswd: "{{ lookup('file', htpasswd_file) }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/docker-registry/secret_htpasswd.yml') }}"
  when: registry_route_info.resources | length == 0

# Create PVC based on the OCS storage class
- name: "Create Registry Storage"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/docker-registry/registry_storage.yml') }}"
  when: registry_route_info.resources | length == 0

# Create an image pull secret for dockerio so that we can install the registry image
- name: "Create docker-io-entitlement secret"
  vars:
    dockerioAuthStr: "{{dockerio_username}}:{{dockerio_password}}"
    dockerioAuth: "{{ dockerioAuthStr | b64encode }}"
    content:
      - '{"auths":{"docker.io": {"username":"{{dockerio_username}}","password":"{{dockerio_password}}","auth":"{{dockerioAuth}}"}'
      - '}'
      - '}'
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: docker-io-entitlement
        namespace: "{{ registry_namespace }}"
      stringData:
        # Only way I could get three consecutive "}" into a string :)
        .dockerconfigjson: "{{ content | join('') | string }}"
  register: result
  when: registry_route_info.resources | length == 0

# Create the deployment and Service
- name: "Create Deployment and Service"
  vars:
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/docker-registry/deployment.yml') }}"
  when: registry_route_info.resources | length == 0

- name: Wait for Registry to be Available
  community.kubernetes.k8s_info:
    api_version: v1
    name: docker-registry
    namespace: docker-registry
    kind: Deployment
    wait: yes
    wait_sleep: 10
    wait_timeout: 180 # 2 minutes until we give up waiting
    wait_condition:
      type: Available
      status: "True"
  when: registry_route_info.resources | length == 0

- name: Create Route
  vars:
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/docker-registry/registry_route.yml') }}"
  when: registry_route_info.resources | length == 0

# Include the registry in the clusters list of insecure registries
- name: Set registry as Insecure on Cluster
  community.kubernetes.k8s:
    definition:
      apiVersion: config.openshift.io/v1
      kind: Image
      metadata:
        name: cluster
      spec:
        registrySources:
          insecureRegistries:
            - docker-registry.docker-registry.svc:5000
  register: result
  when: registry_route_info.resources | length == 0

# Wait until the nodes have applied the insecure registries updates
- name: Wait for Machine Configs to update
  include_tasks: "tasks/wait-machine-config-update.yml"
  when:
    - registry_route_info.resources | length == 0
    - result.changed


# Get the address of the internal registry
- name: Set Registry Name
  set_fact:
    registryPublicHost: "docker-registry.{{ cluster_url }}"
    registryFromCluster: "docker-registry.docker-registry.svc:5000"

- name: "Registry Routes"
  debug:
    msg:
      - "Public Registry Host ....... {{ registryPublicHost }}"
      - "Registry Host From Cluster . {{ registryFromCluster }}"
  when: debugs is search ('registryHosts')


- name: Set registry credentials
  set_fact:
    registryUsername: "{{ registry_user }}"
    registryPassword: "{{ registry_password }}"
