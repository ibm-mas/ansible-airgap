---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Fail if required properties are not provided"
  assert:
    that:
      - case_name is defined and case_name != ""
      - case_bundle_dir is defined and case_bundle_dir != ""
      - case_inventory_name is defined and case_inventory_name != ""
      - registry_public_host is defined and registry_public_host != ""
      - ibm_entitlement_key is defined and ibm_entitlement_key != ""
    fail_msg: "One or more required properties are missing"

- name: "{{ case_name }} : Fail if required properties are not provided (UDS)"
  when: case_name == "ibm-uds"
  assert:
    that:
      - redhat_connect_username is defined and redhat_connect_username != ""
      - redhat_connect_password is defined and redhat_connect_password != ""
    fail_msg: "One or more required properties are missing for UDS"


# 2. Check for required software
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Test if cloudctl is installed"
  shell: cloudctl version
  register: _cloudctl_version
  ignore_errors: true

- name: "{{ case_name }} : Fail if cloudctl is not installed"
  assert:
    that: ( _cloudctl_version['rc'] == 0 )
    fail_msg: "cloudctl tool must be installed."

- name: "{{ case_name }} : Create working directory"
  file:
    path: "{{ case_work_dir }}"
    state: directory

# 3. Debug
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Airgap setup configuration"
  debug:
    msg:
      - "Case Name .............................. {{ case_name }}"
      - "Case Version ........................... {{ case_version }}"
      - "Case Bundle Directory .................. {{ case_bundle_dir }}"
      - "Inventory Name ......................... {{ case_inventory_name }}"
      - "Registry Public Host ................... {{ registry_public_host }}"
      - "Registry Public Port ................... {{ registry_public_port }}"


# 4. Ensure *.sh files in the case bundle are executable
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Make all CASE bundle shell scripts executable"
  shell: chmod u+x {{ case_bundle_dir }}/case/{{ case_name }}/inventory/{{ case_inventory_name }}/files/*.sh


# 5. Set up authentication for the case mirroring process
# -----------------------------------------------------------------------------
# This is the ansible equivalent of running:
#     "cloudctl case launch --action configureCredsAirgap ..."
# but it's faster, cleaner, and handles special characters in passwords properly

# 5.1 Prepare the directory
- name: "{{ case_name }} : Creates airgap secrets directory"
  file:
    path: "{{ ansible_env.HOME }}/.airgap/secrets"
    state: directory

# 5.2 Private registry
- name: "{{ case_name }} : Create auth secret for private registry"
  when:
    - registry_username is defined and registry_username != ""
    - registry_password is defined and registry_password != ""
  vars:
    secret_registry_name: "{{ registry_public_url }}"
    secret_registry_auth: "{{ registry_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"

# 5.3 IBM entitled content
- name: "{{ case_name }} : Create auth secret for cp.icr.io"
  vars:
    secret_registry_name: cp.icr.io
    secret_registry_auth: "{{ ibm_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"

# 5.4 Red Hat Registry (1/2)
- name: "{{ case_name }} : Create auth secret for registry.connect.redhat.com"
  when:
    - redhat_connect_username is defined and redhat_connect_username != ""
    - redhat_connect_password is defined and redhat_connect_password != ""
  vars:
    secret_registry_name: registry.connect.redhat.com
    secret_registry_auth: "{{ redhat_connect_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"

# 5.5 Red Hat Registry (2/2)
- name: "{{ case_name }} : Create auth secret for registry.redhat.io"
  when:
    - redhat_connect_username is defined and redhat_connect_username != ""
    - redhat_connect_password is defined and redhat_connect_password != ""
  vars:
    secret_registry_name: registry.redhat.io
    secret_registry_auth: "{{ redhat_connect_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"


# 6. Execute the Mirror
# -----------------------------------------------------------------------------
# UDS does not support --tolerance or --skipDelta params so we need a special case here :(
- name: "{{ case_name }} : Images (This may take several minutes)"
  when: case_name != "ibm-uds"
  shell: >
    export USE_SKOPEO=True && cloudctl case launch --action mirror-images \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --inventory {{ case_inventory_name }} \
      --tolerance 1 \
      --args "--registry {{ registry_public_url }} --inputDir {{ case_archive_dir }} --skipDelta true" \
    | tee {{ case_bundle_dir }}/mirror-{{ case_name }}-{{ case_inventory_name }}.log
  register: mirror_result

- name: "{{ case_name }} : Debug Mirror"
  when: case_name != "ibm-uds"
  debug:
    msg: "{{ mirror_result.stdout_lines }}"

- name: "{{ case_name }} : Mirror Images (special case)"
  when: case_name == "ibm-uds"
  shell: >
    export USE_SKOPEO=True && cloudctl case launch --action mirror-images \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --inventory {{ case_inventory_name }} \
      --args "--registry {{ registry_public_url }} --inputDir {{ case_archive_dir }}" \
    | tee {{ case_bundle_dir }}/mirror-{{ case_name }}-{{ case_inventory_name }}.log
  register: mirror_result

- name: "Debug Mirror (UDS special case)"
  when: case_name == "ibm-uds"
  debug:
    msg: "{{ mirror_result.stdout_lines }}"


# 7. Db2u operator special cases
# -----------------------------------------------------------------------------
# Note: We can re-use the authentication file generated by the previous tasks
- name: "{{ case_name }} : Mirror norootsquash image (Db2u special case 1/2)"
  when: case_name == "ibm-db2uoperator"
  shell: "skopeo copy --dest-tls-verify=false --authfile='{{ ansible_env.HOME }}/.airgap/auth.json' --all docker://cp.icr.io/cp/cpd/norootsquash@sha256:5dbe9310d15cbe452f6099017defd411eeb6eebb2fecea5d99463227e2518574 docker://{{ registry_public_url }}/cp/cpd/norootsquash:3.0-amd64"

- name: "{{ case_name }} : Mirror extra db2u images to airgap registry (Db2u special case 2/2)"
  when: case_name == "ibm-db2uoperator"
  shell: "skopeo copy --dest-tls-verify=false --authfile='{{ ansible_env.HOME }}/.airgap/auth.json' --all docker://icr.io/db2u/{{ item.name }}@{{ item.digest }} docker://{{ registry_public_url }}/db2u/{{ item.name }}@{{ item.digest }}"
  with_items: "{{ db2u_extra_images }}"
