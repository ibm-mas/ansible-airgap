---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if required properties are not provided"
  assert:
    that:
      - case_name is defined and case_name != ""
      - case_bundle_dir is defined and case_bundle_dir != ""
      - case_inventory_name is defined and case_inventory_name != ""
      - registry_public_host is defined and registry_public_host != ""
      - ibm_entitlement_key is defined and ibm_entitlement_key != ""
    fail_msg: "One or more required properties are missing"

- name: "Fail if required properties are not provided (UDS)"
  when: case_name == "ibm-uds"
  assert:
    that:
      - redhat_connect_username is defined and redhat_connect_username != ""
      - redhat_connect_password is defined and redhat_connect_password != ""
    fail_msg: "One or more required properties are missing for UDS"


# 2. Check for required software
# -----------------------------------------------------------------------------
- name: "Test if cloudctl is installed"
  shell: cloudctl version
  register: _cloudctl_version
  ignore_errors: true

- name: "Fail if cloudctl is not installed"
  assert:
    that: ( _cloudctl_version['rc'] == 0 )
    fail_msg: "cloudctl tool must be installed."


# 3. Debug
# -----------------------------------------------------------------------------
- name: "Airgap setup configuration"
  debug:
    msg:
      - "Case Name .............................. {{ case_name }}"
      - "Case Bundle Directory .................. {{ case_bundle_dir }}"
      - "Inventory Name ......................... {{ case_inventory_name }}"
      - "Registry Public Host ................... {{ registry_public_host }}"
      - "Registry Public Port ................... {{ registry_public_port }}"


# 4. Ensure *.sh files in the case bundle are executable
# -----------------------------------------------------------------------------
- name: "Make all CASE bundle shell scripts executable"
  shell: chmod u+x {{ case_bundle_dir }}/case/{{ case_name }}/inventory/{{ case_inventory_name }}/files/*.sh


# 5. Set up authentication for the case mirroring process
# -----------------------------------------------------------------------------
# This is the ansible equivalent of running:
#     "cloudctl case launch --action configureCredsAirgap ..."
# but it's faster, cleaner, and handles special characters in passwords properly

# 5.1 Prepare the directory
- name: Creates airgap secrets directory
  file:
    path: "{{ ansible_env.HOME }}/.airgap/secrets"
    state: directory

# 5.2 IBM entitled content
- name: Create auth secret for private registry
  when:
    - registry_auth_username is defined and registry_auth_username != ""
    - registry_auth_password is defined and registry_auth_password != ""
  vars:
    secret_registry_name: "{{ registry_public_url }}"
    secret_registry_auth: "{{ registry_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"

# 5.3 IBM entitled content
- name: Create auth secret for cp.icr.io
  vars:
    secret_registry_name: cp.icr.io
    secret_registry_auth: "{{ ibm_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"

# 5.4 Red Hat Registry (1/2)
- name: Create auth secret for registry.connect.redhat.com
  when:
    - redhat_connect_username is defined and redhat_connect_username != ""
    - redhat_connect_password is defined and redhat_connect_password != ""
  vars:
    secret_registry_name: registry.connect.redhat.com
    secret_registry_auth: "{{ redhat_connect_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"

# 5.5 Red Hat Registry (2/2)
- name: Create auth secret for registry.redhat.io
  when:
    - redhat_connect_username is defined and redhat_connect_username != ""
    - redhat_connect_password is defined and redhat_connect_password != ""
  vars:
    secret_registry_name: registry.redhat.io
    secret_registry_auth: "{{ redhat_connect_auth }}"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ ansible_env.HOME }}/.airgap/secrets/{{ secret_registry_name }}.json"


# 6. Execute the Mirror
# -----------------------------------------------------------------------------
# UDS does not support --tolerance or --skipDelta params so we need a special case here :(
- name: Mirror Images
  when: case_name != "ibm-uds"
  shell: >
    export USE_SKOPEO=True && cloudctl case launch --action mirror-images \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --inventory {{ case_inventory_name }} \
      --tolerance 1 \
      --args "--registry {{ registry_public_url }} --inputDir {{ case_archive_dir }} --skipDelta true" \
    | tee {{ case_bundle_dir }}/mirror-{{ case_name }}-{{ case_inventory_name }}.log
  register: mirror_result

- name: "Debug Mirror"
  when: case_name != "ibm-uds"
  debug:
    msg: "{{ mirror_result.stdout_lines }}"

- name: Mirror Images (UDS special case)
  when: case_name == "ibm-uds"
  shell: >
    export USE_SKOPEO=True && cloudctl case launch --action mirror-images \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --inventory {{ case_inventory_name }} \
      --args "--registry {{ registry_public_url }} --inputDir {{ case_archive_dir }}" \
    | tee {{ case_bundle_dir }}/mirror-{{ case_name }}-{{ case_inventory_name }}.log
  register: mirror_result

- name: "Debug Mirror (UDS special case)"
  when: case_name == "ibm-uds"
  debug:
    msg: "{{ mirror_result.stdout_lines }}"


# UDS mirroring doesn't work?
# -----------------------------------------------------------------------------
# Not sure what the problem is ... have performed these actions to address it
# manually.  Needs further investigation.

# skopeo copy --dest-tls-verify=false --all docker://icr.io/cpopen/ibm-user-data-services-catalog@sha256:2e3037e8b9fd32ebbc2f7e9e4bb1edee7292423802034edc0e467569083e44bb docker://$REGISTRY_PUBLIC_HOST:$REGISTRY_PUBLIC_PORT/cpopen/ibm-user-data-services-catalog:latest
# skopeo copy --dest-tls-verify=false --all docker://icr.io/cpopen/ibm-user-data-services-operator-bundle@sha256:f0ad69849d07720cea14258362ac3e15504221ed749464e830c4c8f0bd8c1920 docker://$REGISTRY_PUBLIC_HOST:$REGISTRY_PUBLIC_PORT/cpopen/ibm-user-data-services-operator-bundle:2.0.7
# skopeo copy --dest-tls-verify=false --all docker://icr.io/cpopen/ibm-user-data-services-operator@sha256:9088d0bfd2c39f4824141ba00abc95ad530cf8e8d34872376cc2de125ef9d6db docker://$REGISTRY_PUBLIC_HOST:$REGISTRY_PUBLIC_PORT/cpopen/ibm-user-data-services-operator:2.0.7
# - name: "UDS 2.0.7 bug workaround: Mirror additional images for UDS 2.0.7 to airgap registry"
#   when: case_name == "ibm-uds"
#   shell: "skopeo copy --dest-tls-verify=false --all docker://icr.io/{{ item.name }}@{{ item.digest }} docker://{{ registry_public_url }}/{{ item.name }}:{{ item.tag }}"
#   with_items:
#     - name: cpopen/ibm-user-data-services-catalog
#       digest: sha256:2e3037e8b9fd32ebbc2f7e9e4bb1edee7292423802034edc0e467569083e44bb
#       tag: latest
#     - name: cpopen/ibm-user-data-services-operator-bundle
#       digest: sha256:f0ad69849d07720cea14258362ac3e15504221ed749464e830c4c8f0bd8c1920
#       tag: "2.0.7"
#     - name: cpopen/ibm-user-data-services-operator
#       digest: sha256:9088d0bfd2c39f4824141ba00abc95ad530cf8e8d34872376cc2de125ef9d6db
#       tag: "2.0.7"
#   register: uds_workaround_result
