---
# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if type is not provided"
  when: cluster_type is not defined or cluster_type == ""
  fail:
    msg: "cluster_type property is required"

- name: "Fail if cluster_type is not supported"
  when: cluster_type is not in supported_cluster_types
  fail:
    msg: "cluster_type '{{ cluster_type }}' property is not supported by this role"

- name: "Fail if cluster_name is not provided"
  when: cluster_name is not defined or cluster_name == ""
  fail:
    msg: "cluster_name property is required"

- name: "Fail if case_name is not provided"
  when: case_name is not defined or case_name == ""
  fail:
    msg: "case_name property is required"

- name: "Fail if case_bundle_dir is not provided"
  when: case_bundle_dir is not defined or case_bundle_dir == ""
  fail:
    msg: "case_bundle_dir property is not required"

- name: "Fail if case_inventory_name is not provided"
  when: case_inventory_name is not defined or case_inventory_name == ""
  fail:
    msg: "case_inventory_name is required"

- name: "Test if cloudctl is installed"
  shell: cloudctl version
  register: _cloudctl_version
  ignore_errors: true

- name: "Fail if cloudctl is not installed"
  when: ( _cloudctl_version['rc'] != 0 )
  fail:
    msg: "cloudctl tool must be installed."

- name: "Airgap operator OLM installation"
  debug:
    msg:
      - "Case Name ............ {{ case_name }}"
      - "Case Bundle Directory. {{ case_bundle_dir }}"
      - "Inventory Name........ {{ case_inventory_name }}"
      - "Target Namespace...... {{ target_namespace }}"

# 2. Check cluster login
# -----------------------------------------------------------------------------
- name: "Check cluster login"
  shell: oc status
  register: _oc_status
  ignore_errors: true

- name: "Login to cluster"
  include_role:
    name: ibm.mas_devops.ocp_login
  vars:
    login_server: "https://api.{{ cluster_name }}.cp.fyre.ibm.com:6443"
  when: ( _oc_status['rc'] != 0 ) or (not _oc_status['stdout'] is search ( login_server ) )

# 2. Install catalog and operator
# -----------------------------------------------------------------------------

- name: Create Target Installation Namespace
  vars:
    namespace: "{{ target_namespace }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/namespace.yaml') }}"
  register: create_namespace_result

# It would be nice to check that the catalogsource has a digest reference

- name: Install Catalog
  shell: >
    cloudctl case launch --action install-catalog \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --inventory {{ case_inventory_name }} \
      --namespace {{ target_namespace }} \
      --tolerance 1 \
      --args "\
        --inputDir {{ case_archive_dir }} \
        "
  register: installCatalogResult

- name: install Catalog Result
  debug:
    var: installCatalogResult
  when: debugs is search ('installCatalogResult')

- name: Wait for the catalog pod to run
  community.kubernetes.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: CatalogSource
    name: "{{ case_name }}-operator-catalog" # This is the naming convention but may vary
    namespace: openshift-marketplace
    wait: yes
    wait_sleep: 10
    wait_timeout: 60 # 1 min until we give up waiting for the CRD to get into the expected state
    #wait_condition:
    #  type: Admitted
    #  status: True
  register: catalogSource

- name: Install Operator
  shell: >
    cloudctl case launch --action install-operator \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --inventory {{ case_inventory_name }} \
      --namespace {{ target_namespace }} \
      --tolerance 1 \
      --args "\
        --inputDir {{ case_archive_dir }} \
        "
  register: installOperatorResult

- name: install Operator Result
  debug:
    var: installOperatorResult
  when: debugs is search ('installOperatorResult')
