---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if case_name is not provided"
  when: case_name is not defined or case_name == ""
  fail:
    msg: "case_name property is required"

- name: "Fail if case_bundle_dir is not provided"
  when: case_bundle_dir is not defined or case_bundle_dir == ""
  fail:
    msg: "case_bundle_dir property is required"

- name: "Fail if case_inventory_name is not provided"
  when: case_inventory_name is not defined or case_inventory_name == ""
  fail:
    msg: "case_inventory_name is required"

- name: "Test if cloudctl is installed"
  shell: cloudctl version
  register: _cloudctl_version
  ignore_errors: true

- name: "Fail if cloudctl is not installed"
  when: ( _cloudctl_version['rc'] != 0 )
  fail:
    msg: "cloudctl tool must be installed."

- name: "CASE configuration"
  debug:
    msg:
      - "Case Name ............ {{ case_name }}"
      - "Case Bundle Directory. {{ case_bundle_dir }}"
      - "Inventory Name........ {{ case_inventory_name }}"

# 1. Download and Extract CASE Archive if case_source defines an online archive
- name: "Empty CASE Directory"
  ansible.builtin.file:
    path: "{{ case_dir }}"
    state: absent
  vars:
    case_dir: "{{ case_bundle_dir }}/case"
  when:
    - case_source is defined
    - case_source is match("http.*\.tgz")

- name: "Create CASE Directory"
  ansible.builtin.file:
    path: "{{ case_dir }}"
    state: directory
  vars:
    case_dir: "{{ case_bundle_dir }}/case"

- name: "Get CASE Archive"
  get_url:
    url: "{{ case_source }}"
    validate_certs: false
    dest: "{{ case_bundle_dir }}"
  register: _case_download
  when:
    - case_source is defined
    - case_source is match("http.*\.tgz")

- name: "Extract CASE Archive"
  shell: |
    tar -xzf "{{ _case_download.dest }}" -C "{{ case_dir }}"
  vars:
    case_dir: "{{ case_bundle_dir }}/case"
  register: _case_unzip
  when:
    - case_source is defined
    - case_source is match("http.*\.tgz")

# 4. Process CASE to configure image mirroring
# ---------------------------------------------

- name: Save Case
  shell: >
    cloudctl case save \
      --case {{ case_bundle_dir }}/case/{{ case_name }} \
      --outputdir {{ case_archive_dir }} \
      --tolerance 1
  register: saveCaseResult

# If testing a development build, we need to modify the saved reference images (change to artifactory and set the digests etc).
- name: Configure Case for Development
  include_tasks: "tasks/setup-development-airgap.yml"
  when:
    - dev_overrides is defined
    - not dev_overrides == ""
# TBD - It would be nicer to set up case resolvers to have the same effect.

# Some CASE bundles (e.g. ibm-mas) define images that we don't want to mirror, so delete the excluded image files.
- name: Delete excluded images
  shell: rm {{ case_archive_dir }}/{{item}}*-images.csv
  register: excludeImagesResult
  loop: "{{ excludeImages.split(',') }}"
  when:
  - excludeImages is defined
  - excludeImages != ""
