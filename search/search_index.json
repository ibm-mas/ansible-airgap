{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MAS Air Gap Ansible Collection \uf0c1 Extension to ibm.mas_devops providing support for air gap deployments. Important This collection and automation around air gap support is currently a work in progress and is incomplete! 1. Deploy private registry \uf0c1 There are multiple options for setting up your private registry: You can deploy the private registry inside the same OpenShift cluster that you intend to deploy Maximo Application Suite You can deploy the private registry in a seperate OpenShift cluster You can deploy the private registry on a normal server Important Your target OCP cluster for MAS installation must have network access to the location that you set up your prviate container registry. We have provided automation to deploy a private registry inside an OpenShift cluster. You can use this to set up the regsitry in the same cluster that you will deploy MAS, or in a seperate cluster. The easiest way drive the automation is to use the MAS command line container image and run mas setup-registry at the prompt: $ docker run -ti --rm quay.io/ibmmas/cli Alternatively you can run the ibm.mas_airgap.registry Ansible role directly if your local machine meets all the required dependencies: export REGISTRY_NAMESPACE=airgap-registry export REGISTRY_STORAGE_CLASS=ibmc-block-gold export REGISTRY_STORAGE_CAPACITY=100Gi export REGISTRY_SERVICE_TYPE=loadbalancer export ROLE_NAME=registry ansible-playbook ibm.mas_airgap.run_role 2. Mirror images \uf0c1 The easiest way drive the automation is to use the MAS command line container image and run mas mirror-images at the prompt: $ docker run -ti --rm quay.io/ibmmas/cli mirror-images This will mirror all (or a subset) container images needed for a MAS installation to your private registry Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PUBLIC_HOST=xxx export REGISTRY_PUBLIC_PORT=xxx ansible-playbook ibm.mas_airgap.mirror_core ansible-playbook ibm.mas_airgap.mirror_add_iot 3. Configure the target OCP cluster \uf0c1 The easiest way drive the automation is to use the MAS command line container image and run mas configure-airgap at the prompt: $ docker run -ti --rm quay.io/ibmmas/cli This will configure your target OCP cluster to use a private docker register, install the operator catalogs required by MAS from that mirror, and install the necessary configmaps to instruct a MAS instance to use image digests instead of image tags so that image mirroring works. Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PRIVATE_HOST=xxx export REGISTRY_PRIVATE_PORT=xxx export REGISTRY_PRIVATE_CA_FILE=xxx export MAS_INSTANCE_ID=xxx ROLE_NAME=ocp_contentsourcepolicy ansible-playbook ibm.mas_airgap.run_role 4. Install Maximo Application Suite \uf0c1 Running mas install will install MAS, deploying the OpenShift Pipelines operator into your cluster & using it to launch the suite installation pipeline. Alternatively, review the ibm.mas_devops documentation for full details of the options available for installing MAS using Ansible.","title":"Home"},{"location":"#mas-air-gap-ansible-collection","text":"Extension to ibm.mas_devops providing support for air gap deployments. Important This collection and automation around air gap support is currently a work in progress and is incomplete!","title":"MAS Air Gap Ansible Collection"},{"location":"#1-deploy-private-registry","text":"There are multiple options for setting up your private registry: You can deploy the private registry inside the same OpenShift cluster that you intend to deploy Maximo Application Suite You can deploy the private registry in a seperate OpenShift cluster You can deploy the private registry on a normal server Important Your target OCP cluster for MAS installation must have network access to the location that you set up your prviate container registry. We have provided automation to deploy a private registry inside an OpenShift cluster. You can use this to set up the regsitry in the same cluster that you will deploy MAS, or in a seperate cluster. The easiest way drive the automation is to use the MAS command line container image and run mas setup-registry at the prompt: $ docker run -ti --rm quay.io/ibmmas/cli Alternatively you can run the ibm.mas_airgap.registry Ansible role directly if your local machine meets all the required dependencies: export REGISTRY_NAMESPACE=airgap-registry export REGISTRY_STORAGE_CLASS=ibmc-block-gold export REGISTRY_STORAGE_CAPACITY=100Gi export REGISTRY_SERVICE_TYPE=loadbalancer export ROLE_NAME=registry ansible-playbook ibm.mas_airgap.run_role","title":"1. Deploy private registry"},{"location":"#2-mirror-images","text":"The easiest way drive the automation is to use the MAS command line container image and run mas mirror-images at the prompt: $ docker run -ti --rm quay.io/ibmmas/cli mirror-images This will mirror all (or a subset) container images needed for a MAS installation to your private registry Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PUBLIC_HOST=xxx export REGISTRY_PUBLIC_PORT=xxx ansible-playbook ibm.mas_airgap.mirror_core ansible-playbook ibm.mas_airgap.mirror_add_iot","title":"2. Mirror images"},{"location":"#3-configure-the-target-ocp-cluster","text":"The easiest way drive the automation is to use the MAS command line container image and run mas configure-airgap at the prompt: $ docker run -ti --rm quay.io/ibmmas/cli This will configure your target OCP cluster to use a private docker register, install the operator catalogs required by MAS from that mirror, and install the necessary configmaps to instruct a MAS instance to use image digests instead of image tags so that image mirroring works. Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PRIVATE_HOST=xxx export REGISTRY_PRIVATE_PORT=xxx export REGISTRY_PRIVATE_CA_FILE=xxx export MAS_INSTANCE_ID=xxx ROLE_NAME=ocp_contentsourcepolicy ansible-playbook ibm.mas_airgap.run_role","title":"3. Configure the target OCP cluster"},{"location":"#4-install-maximo-application-suite","text":"Running mas install will install MAS, deploying the OpenShift Pipelines operator into your cluster & using it to launch the suite installation pipeline. Alternatively, review the ibm.mas_devops documentation for full details of the options available for installing MAS using Ansible.","title":"4. Install Maximo Application Suite"},{"location":"changes/","text":"Changes \uf0c1 2.5 Support IBM Pak and Two Phase Mirroring ( #79 ) 2.4 Add support for Sep 2022 catalog ( #76 ) 2.3 Add image mirroring support for remaining applications ( #72 ) 2.2 Catalog update for IoT airgap support fix ( #68 ) 2.1 Multiple updates: Support Maximo Optimizer ( #66 ) Support Maximo Visual Inspection ( #67 ) 2.0 Support for MAS 8.8 & Maximo Curated Operator Catalog ( #63 ) 1.3 Support IoT application install ( #43 ) 1.2 Multiple updates: Additional mirror playbooks ( #26 ) Mirror openshift release and operators ( #36 ) 1.1 Multiple updates: Add case_prepare and case_mirror roles ( #3 ) Add mirror_truststore_mgr playbook ( #12 ) Support cluster configuration for air gap ( #13 ) Add simulate_network role ( #16 ) Add playbook to mirror UDS images ( #19 ) Add role to install digest configmaps ( #18 ) Add basic auth to registry ( #22 ) 1.0 Initial release ( #2 )","title":"Changes"},{"location":"changes/#changes","text":"2.5 Support IBM Pak and Two Phase Mirroring ( #79 ) 2.4 Add support for Sep 2022 catalog ( #76 ) 2.3 Add image mirroring support for remaining applications ( #72 ) 2.2 Catalog update for IoT airgap support fix ( #68 ) 2.1 Multiple updates: Support Maximo Optimizer ( #66 ) Support Maximo Visual Inspection ( #67 ) 2.0 Support for MAS 8.8 & Maximo Curated Operator Catalog ( #63 ) 1.3 Support IoT application install ( #43 ) 1.2 Multiple updates: Additional mirror playbooks ( #26 ) Mirror openshift release and operators ( #36 ) 1.1 Multiple updates: Add case_prepare and case_mirror roles ( #3 ) Add mirror_truststore_mgr playbook ( #12 ) Support cluster configuration for air gap ( #13 ) Add simulate_network role ( #16 ) Add playbook to mirror UDS images ( #19 ) Add role to install digest configmaps ( #18 ) Add basic auth to registry ( #22 ) 1.0 Initial release ( #2 )","title":"Changes"},{"location":"roles/install_digest_cm/","text":"install_digest_cm \uf0c1 This role installs the additional ConfigMaps that enable disconnected install support in early Maximo Application Suite operators. It is being phased-out in favour of built-in disconnect install support from MAS 8.8 onwards. Note This is an internal role, you should not need to explicitly call this yourself. It will automatically be invoked at the appropriate time when using roles in ibm.mas_devops if it detects the environment is running in disconnected mode. Role Variables \uf0c1 case_name \uf0c1 The name of the IBM CASE bundle that contains the digest ConfigMap. Required Environment Variable: None Default: None case_version \uf0c1 Version of the IBM CASE bundle from which the digest ConfigMap should be taken. Required Environment Variable: None Default: None digest_image_map_namespace \uf0c1 The namespace where the ConfigMap will be created. Required Environment Variable: None Default: None License \uf0c1 EPL-2.0","title":"install_digest_cm"},{"location":"roles/install_digest_cm/#install_digest_cm","text":"This role installs the additional ConfigMaps that enable disconnected install support in early Maximo Application Suite operators. It is being phased-out in favour of built-in disconnect install support from MAS 8.8 onwards. Note This is an internal role, you should not need to explicitly call this yourself. It will automatically be invoked at the appropriate time when using roles in ibm.mas_devops if it detects the environment is running in disconnected mode.","title":"install_digest_cm"},{"location":"roles/install_digest_cm/#role-variables","text":"","title":"Role Variables"},{"location":"roles/install_digest_cm/#case_name","text":"The name of the IBM CASE bundle that contains the digest ConfigMap. Required Environment Variable: None Default: None","title":"case_name"},{"location":"roles/install_digest_cm/#case_version","text":"Version of the IBM CASE bundle from which the digest ConfigMap should be taken. Required Environment Variable: None Default: None","title":"case_version"},{"location":"roles/install_digest_cm/#digest_image_map_namespace","text":"The namespace where the ConfigMap will be created. Required Environment Variable: None Default: None","title":"digest_image_map_namespace"},{"location":"roles/install_digest_cm/#license","text":"EPL-2.0","title":"License"},{"location":"roles/mirror_case_prepare/","text":"mirror_case_prepare \uf0c1 This role generates a mirror manifest file suitable for use with the oc mirror command (or the ibm.mas_airgap.mirror_images role) from an IBM CASE bundle. Requirements \uf0c1 The ibm-pak plugin must be installed. Role Variables \uf0c1 case_name \uf0c1 The name of the CASE bundle to prepare for mirroring. Required Environment Variable: CASE_NAME Default: None case_version \uf0c1 The version of the CASE bundle to prepare for mirroring. Required Environment Variable: CASE_VERSION Default: None registry_public_host \uf0c1 The public hostname for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_HOST Default: None registry_public_port \uf0c1 The public port for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_PORT Default: None exclude_images \uf0c1 A list of child CASE bundles to exclude from the mirroring process. Optional Environment Variable: None Default: None Example Playbook \uf0c1 - hosts: localhost vars: case_name: ibm-mas case_version: 8.8.1 exclude_images: - ibm-truststore-mgr - ibm-sls - ibm-mas-assist - ibm-mas-iot - ibm-mas-manage registry_public_host: myregistry.com registry_public_port: 32500 roles: - ibm.mas_airgap.mirror_case_prepare License \uf0c1 EPL-2.0","title":"mirror_case_prepare"},{"location":"roles/mirror_case_prepare/#mirror_case_prepare","text":"This role generates a mirror manifest file suitable for use with the oc mirror command (or the ibm.mas_airgap.mirror_images role) from an IBM CASE bundle.","title":"mirror_case_prepare"},{"location":"roles/mirror_case_prepare/#requirements","text":"The ibm-pak plugin must be installed.","title":"Requirements"},{"location":"roles/mirror_case_prepare/#role-variables","text":"","title":"Role Variables"},{"location":"roles/mirror_case_prepare/#case_name","text":"The name of the CASE bundle to prepare for mirroring. Required Environment Variable: CASE_NAME Default: None","title":"case_name"},{"location":"roles/mirror_case_prepare/#case_version","text":"The version of the CASE bundle to prepare for mirroring. Required Environment Variable: CASE_VERSION Default: None","title":"case_version"},{"location":"roles/mirror_case_prepare/#registry_public_host","text":"The public hostname for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_HOST Default: None","title":"registry_public_host"},{"location":"roles/mirror_case_prepare/#registry_public_port","text":"The public port for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_PORT Default: None","title":"registry_public_port"},{"location":"roles/mirror_case_prepare/#exclude_images","text":"A list of child CASE bundles to exclude from the mirroring process. Optional Environment Variable: None Default: None","title":"exclude_images"},{"location":"roles/mirror_case_prepare/#example-playbook","text":"- hosts: localhost vars: case_name: ibm-mas case_version: 8.8.1 exclude_images: - ibm-truststore-mgr - ibm-sls - ibm-mas-assist - ibm-mas-iot - ibm-mas-manage registry_public_host: myregistry.com registry_public_port: 32500 roles: - ibm.mas_airgap.mirror_case_prepare","title":"Example Playbook"},{"location":"roles/mirror_case_prepare/#license","text":"EPL-2.0","title":"License"},{"location":"roles/mirror_extras_prepare/","text":"mirror_extras_prepare \uf0c1 This role generates a mirror manifest file suitable for use with the oc mirror command (or the ibm.mas_airgap.mirror_images role) for a specific set of extra images. Available Extras \uf0c1 Extra Versions Description catalog N/A Special extra package for mirroring the IBM Maximo Operator Catalog db2u 1.0.0 Extra container images missing from the ibm-db2operator CASE bundle mongoce 4.2.6 Package containing all images required to use MongoCE Operator in the disconnected environment uds 1.0.0, 1.1.0 Extra container images missing from the ibm-uds CASE bundle Role Variables \uf0c1 extras_name \uf0c1 The name of the extras package to prepare for mirroring. Required Environment Variable: EXTRAS_NAME Default: None extras_version \uf0c1 The version of the extras package to prepare for mirroring. Required Environment Variable: EXTRAS_VERSION Default: None registry_public_host \uf0c1 The public hostname for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_HOST Default: None registry_public_port \uf0c1 The public port for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_PORT Default: None Example Playbook \uf0c1 - hosts: localhost vars: extras_name: mongoce extras_version: 4.2.6 registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud registry_public_port: 32500 roles: - ibm.mas_airgap.mirror_extras_prepare License \uf0c1 EPL-2.0","title":"mirror_extras_prepare"},{"location":"roles/mirror_extras_prepare/#mirror_extras_prepare","text":"This role generates a mirror manifest file suitable for use with the oc mirror command (or the ibm.mas_airgap.mirror_images role) for a specific set of extra images.","title":"mirror_extras_prepare"},{"location":"roles/mirror_extras_prepare/#available-extras","text":"Extra Versions Description catalog N/A Special extra package for mirroring the IBM Maximo Operator Catalog db2u 1.0.0 Extra container images missing from the ibm-db2operator CASE bundle mongoce 4.2.6 Package containing all images required to use MongoCE Operator in the disconnected environment uds 1.0.0, 1.1.0 Extra container images missing from the ibm-uds CASE bundle","title":"Available Extras"},{"location":"roles/mirror_extras_prepare/#role-variables","text":"","title":"Role Variables"},{"location":"roles/mirror_extras_prepare/#extras_name","text":"The name of the extras package to prepare for mirroring. Required Environment Variable: EXTRAS_NAME Default: None","title":"extras_name"},{"location":"roles/mirror_extras_prepare/#extras_version","text":"The version of the extras package to prepare for mirroring. Required Environment Variable: EXTRAS_VERSION Default: None","title":"extras_version"},{"location":"roles/mirror_extras_prepare/#registry_public_host","text":"The public hostname for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_HOST Default: None","title":"registry_public_host"},{"location":"roles/mirror_extras_prepare/#registry_public_port","text":"The public port for the target registry. The images will not be mirrored to the registry at this time, but to prepare the manifest we need to know the target destination. Required Environment Variable: REGISTRY_PUBLIC_PORT Default: None","title":"registry_public_port"},{"location":"roles/mirror_extras_prepare/#example-playbook","text":"- hosts: localhost vars: extras_name: mongoce extras_version: 4.2.6 registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud registry_public_port: 32500 roles: - ibm.mas_airgap.mirror_extras_prepare","title":"Example Playbook"},{"location":"roles/mirror_extras_prepare/#license","text":"EPL-2.0","title":"License"},{"location":"roles/mirror_images/","text":"mirror_images \uf0c1 Supports mirroring specific images to the target mirror registry","title":"mirror_images"},{"location":"roles/mirror_images/#mirror_images","text":"Supports mirroring specific images to the target mirror registry","title":"mirror_images"},{"location":"roles/ocp_contentsourcepolicy/","text":"ocp_contentsourcepolicies \uf0c1 TODO: Write me! Warning This doesn't work on IBMCloud ROKS. IBM Cloud RedHat OpenShift Service does not implement support for ImageContentSourcePolicies . If you want to use image mirroring you must manually configure each worker node individually using the IBM Cloud command line tool.","title":"ocp_contentsourcepolicy"},{"location":"roles/ocp_contentsourcepolicy/#ocp_contentsourcepolicies","text":"TODO: Write me! Warning This doesn't work on IBMCloud ROKS. IBM Cloud RedHat OpenShift Service does not implement support for ImageContentSourcePolicies . If you want to use image mirroring you must manually configure each worker node individually using the IBM Cloud command line tool.","title":"ocp_contentsourcepolicies"},{"location":"roles/ocp_operators_mirror/","text":"ocp_operators_mirror \uf0c1 This role uses the specifed Red Hat OpenShift Operator version to mirror the standard OpenShift catalog container images to a mirror registry and configure the cluster to pull images from this mirror. When mirroring is complete, you can view the content of your registry: curl -k https://$REGISTRY_PUBLIC_HOST/v2/_catalog | jq Requirements \uf0c1 oc tool must be installed Role Variables \uf0c1 openshift_operators_version \uf0c1 The version of the operator catalogs to be mirrored in major.minor format, e.g. 4.8 . Required Environment Variable: OPENSHIFT_OPERATORS_VERSION Default: None log_dir \uf0c1 The directory to write output log. Required Environment Variable: LOG_DIR Default: /tmp Role Variables - Red Hat Authentication \uf0c1 redhat_connect_username \uf0c1 The username for accessing Red Hat docker images. Required Environment Variable: REDHAT_CONNECT_USERNAME Default: None redhat_connect_password \uf0c1 The password for accessing Red Hat docker images. Required Environment Variable: REDHAT_CONNECT_PASSWORD Default: None Role Variables - Target Registry \uf0c1 registry_public_host \uf0c1 The public hostname for the target registry Required Environment Variable: REGISTRY_PUBLIC_HOST Default: None registry_public_port \uf0c1 The public port number for the target registry Required Environment Variable: REGISTRY_PUBLIC_PORT Default: None registry_username \uf0c1 The username for the target registry, if the target registry requires authentication. Optional Environment Variable: REGISTRY_USERNAME Default: None registry_password \uf0c1 The password for the target registry, if the target registry requires authentication. Optional Environment Variable: REGISTRY_PASSWORD Default: None Example Playbook \uf0c1 - hosts: localhost vars: openshift_operators_version: 4.8 registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud registry_public_port: 32500 roles: - ibm.mas_airgap.ocp_operators_mirror License \uf0c1 EPL-2.0","title":"ocp_operators_mirror"},{"location":"roles/ocp_operators_mirror/#ocp_operators_mirror","text":"This role uses the specifed Red Hat OpenShift Operator version to mirror the standard OpenShift catalog container images to a mirror registry and configure the cluster to pull images from this mirror. When mirroring is complete, you can view the content of your registry: curl -k https://$REGISTRY_PUBLIC_HOST/v2/_catalog | jq","title":"ocp_operators_mirror"},{"location":"roles/ocp_operators_mirror/#requirements","text":"oc tool must be installed","title":"Requirements"},{"location":"roles/ocp_operators_mirror/#role-variables","text":"","title":"Role Variables"},{"location":"roles/ocp_operators_mirror/#openshift_operators_version","text":"The version of the operator catalogs to be mirrored in major.minor format, e.g. 4.8 . Required Environment Variable: OPENSHIFT_OPERATORS_VERSION Default: None","title":"openshift_operators_version"},{"location":"roles/ocp_operators_mirror/#log_dir","text":"The directory to write output log. Required Environment Variable: LOG_DIR Default: /tmp","title":"log_dir"},{"location":"roles/ocp_operators_mirror/#role-variables-red-hat-authentication","text":"","title":"Role Variables - Red Hat Authentication"},{"location":"roles/ocp_operators_mirror/#redhat_connect_username","text":"The username for accessing Red Hat docker images. Required Environment Variable: REDHAT_CONNECT_USERNAME Default: None","title":"redhat_connect_username"},{"location":"roles/ocp_operators_mirror/#redhat_connect_password","text":"The password for accessing Red Hat docker images. Required Environment Variable: REDHAT_CONNECT_PASSWORD Default: None","title":"redhat_connect_password"},{"location":"roles/ocp_operators_mirror/#role-variables-target-registry","text":"","title":"Role Variables - Target Registry"},{"location":"roles/ocp_operators_mirror/#registry_public_host","text":"The public hostname for the target registry Required Environment Variable: REGISTRY_PUBLIC_HOST Default: None","title":"registry_public_host"},{"location":"roles/ocp_operators_mirror/#registry_public_port","text":"The public port number for the target registry Required Environment Variable: REGISTRY_PUBLIC_PORT Default: None","title":"registry_public_port"},{"location":"roles/ocp_operators_mirror/#registry_username","text":"The username for the target registry, if the target registry requires authentication. Optional Environment Variable: REGISTRY_USERNAME Default: None","title":"registry_username"},{"location":"roles/ocp_operators_mirror/#registry_password","text":"The password for the target registry, if the target registry requires authentication. Optional Environment Variable: REGISTRY_PASSWORD Default: None","title":"registry_password"},{"location":"roles/ocp_operators_mirror/#example-playbook","text":"- hosts: localhost vars: openshift_operators_version: 4.8 registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud registry_public_port: 32500 roles: - ibm.mas_airgap.ocp_operators_mirror","title":"Example Playbook"},{"location":"roles/ocp_operators_mirror/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_release_mirror/","text":"case_mirror \uf0c1 This role uses the specifed OpenShift Release to mirror the OpenShift release container images to the mirror registry and configure the cluster to pull images from this mirror. When mirroring is complete, you can view the content of your registry: curl -k https://$REGISTRY_PUBLIC_HOST/v2/_catalog | jq Requirements \uf0c1 oc tool must be installed Role Variables \uf0c1 openshift_release_version The version of standard operators to be mirrored. log_dir The directory to write output log. ibm_entitlement_key The entitlement key for mirroring container images from cp.icr.io. redhat_connect_username The username for accessing Red Hat docker images. redhat_connect_password The password for accessing Red Hat docker images. registry_public_host The public hostname for the target registry (defaults to the value of the REGISTRY_PUBLIC_HOST environment variable). registry_public_port The public port number for the target registry (defaults to the value of the REGISTRY_PUBLIC_PORT environment variable). registry_username The username for the target registry (defaults to the value of the REGISTRY_USERNAME environment variable). registry_password The password for the target registry (defaults to the value of the REGISTRY_PASSWORD environment variable). Example Playbook \uf0c1 - hosts: localhost vars: openshift_release_version: 4.8.39 registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud registry_public_port: 32500 roles: - ibm.mas_airgap.ocp_release_mirror License \uf0c1 EPL-2.0","title":"ocp_release_mirror"},{"location":"roles/ocp_release_mirror/#case_mirror","text":"This role uses the specifed OpenShift Release to mirror the OpenShift release container images to the mirror registry and configure the cluster to pull images from this mirror. When mirroring is complete, you can view the content of your registry: curl -k https://$REGISTRY_PUBLIC_HOST/v2/_catalog | jq","title":"case_mirror"},{"location":"roles/ocp_release_mirror/#requirements","text":"oc tool must be installed","title":"Requirements"},{"location":"roles/ocp_release_mirror/#role-variables","text":"openshift_release_version The version of standard operators to be mirrored. log_dir The directory to write output log. ibm_entitlement_key The entitlement key for mirroring container images from cp.icr.io. redhat_connect_username The username for accessing Red Hat docker images. redhat_connect_password The password for accessing Red Hat docker images. registry_public_host The public hostname for the target registry (defaults to the value of the REGISTRY_PUBLIC_HOST environment variable). registry_public_port The public port number for the target registry (defaults to the value of the REGISTRY_PUBLIC_PORT environment variable). registry_username The username for the target registry (defaults to the value of the REGISTRY_USERNAME environment variable). registry_password The password for the target registry (defaults to the value of the REGISTRY_PASSWORD environment variable).","title":"Role Variables"},{"location":"roles/ocp_release_mirror/#example-playbook","text":"- hosts: localhost vars: openshift_release_version: 4.8.39 registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud registry_public_port: 32500 roles: - ibm.mas_airgap.ocp_release_mirror","title":"Example Playbook"},{"location":"roles/ocp_release_mirror/#license","text":"EPL-2.0","title":"License"},{"location":"roles/registry/","text":"registry \uf0c1 Create a Docker Registry running on RedHat OpenShift cluster. The registry will be backed by persistant storage, and accessible via either a clusterIP or loadbalancer service. Usage \uf0c1 If you set up the registry with a loadbalancer service you will be able to push to the registry via the cluster's hostname, but before you can use the registry you will need to install the registry's CA certificate and restart the Docker daemon so that your client trusts the new registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo echo \"$CACERT\" > /etc/docker/certs.d/$DOMAIN\\:32500/ca.crt sudo service docker restart You can now use the registry as normal: DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal $DOMAIN:32500/ubi8/ubi-minimal docker push $DOMAIN:32500/ubi8/ubi-minimal If you set up the registry with a clusterip service you will only be able to push to the registry after using port forwarding: oc -n airgap-registry port-forward deployment/airgap-registry 9000:5000 docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal localhost:9000/ubi8/ubi-minimal docker push localhost:9000/ubi8/ubi-minimal However, you will still need to set up Docker trust for the \"local\" registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo mkdir /etc/docker/certs.d/localhost\\:9000 sudo echo \"$CACERT\" > /etc/docker/certs.d/localhost\\:9000/ca.crt sudo service docker restart Role Variables \uf0c1 registry_namespace \uf0c1 The namespace where the registry to run Optional Environment Variable: REGISTRY_NAMESPACE Default Value: airgap-registry registry_storage_class \uf0c1 Required. The name of the storage class to configure the MongoDb operator to use for persistent storage in the MongoDb cluster. Required , unless running in IBM Cloud ROKS, where the storage class will default to ibmc-block-gold . Environment Variable: REGISTRY_STORAGE_CLASS Default Value: None registry_storage_capacity \uf0c1 The size of the PVC that will be created for data storage in the cluster. Optional Environment Variable: REGISTRY_STORAGE_CAPACITY Default Value: 100Gi registry_service_type \uf0c1 The type of service to set up in front of the registry, either loadbalancer or clusterip . Using loadbalancer will allow you to access the registry from outside of your cluster via the cluster domain on port 32500 . If you have other loadbalancers on the cluster that already claim port 32500 this role can not be usedbecause currently the loadbalancer port can not be customised. Optional Environment Variable: REGISTRY_SERVICE_TYPE Default Value: loadbalancer Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: registry_storage_class: ibmc-block-gold registry_storage_capacity: 500Gb registry_service_type: loadbalancer roles: - ibm.mas_airgap.registry License \uf0c1 EPL-2.0","title":"registry"},{"location":"roles/registry/#registry","text":"Create a Docker Registry running on RedHat OpenShift cluster. The registry will be backed by persistant storage, and accessible via either a clusterIP or loadbalancer service.","title":"registry"},{"location":"roles/registry/#usage","text":"If you set up the registry with a loadbalancer service you will be able to push to the registry via the cluster's hostname, but before you can use the registry you will need to install the registry's CA certificate and restart the Docker daemon so that your client trusts the new registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo echo \"$CACERT\" > /etc/docker/certs.d/$DOMAIN\\:32500/ca.crt sudo service docker restart You can now use the registry as normal: DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal $DOMAIN:32500/ubi8/ubi-minimal docker push $DOMAIN:32500/ubi8/ubi-minimal If you set up the registry with a clusterip service you will only be able to push to the registry after using port forwarding: oc -n airgap-registry port-forward deployment/airgap-registry 9000:5000 docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal localhost:9000/ubi8/ubi-minimal docker push localhost:9000/ubi8/ubi-minimal However, you will still need to set up Docker trust for the \"local\" registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo mkdir /etc/docker/certs.d/localhost\\:9000 sudo echo \"$CACERT\" > /etc/docker/certs.d/localhost\\:9000/ca.crt sudo service docker restart","title":"Usage"},{"location":"roles/registry/#role-variables","text":"","title":"Role Variables"},{"location":"roles/registry/#registry_namespace","text":"The namespace where the registry to run Optional Environment Variable: REGISTRY_NAMESPACE Default Value: airgap-registry","title":"registry_namespace"},{"location":"roles/registry/#registry_storage_class","text":"Required. The name of the storage class to configure the MongoDb operator to use for persistent storage in the MongoDb cluster. Required , unless running in IBM Cloud ROKS, where the storage class will default to ibmc-block-gold . Environment Variable: REGISTRY_STORAGE_CLASS Default Value: None","title":"registry_storage_class"},{"location":"roles/registry/#registry_storage_capacity","text":"The size of the PVC that will be created for data storage in the cluster. Optional Environment Variable: REGISTRY_STORAGE_CAPACITY Default Value: 100Gi","title":"registry_storage_capacity"},{"location":"roles/registry/#registry_service_type","text":"The type of service to set up in front of the registry, either loadbalancer or clusterip . Using loadbalancer will allow you to access the registry from outside of your cluster via the cluster domain on port 32500 . If you have other loadbalancers on the cluster that already claim port 32500 this role can not be usedbecause currently the loadbalancer port can not be customised. Optional Environment Variable: REGISTRY_SERVICE_TYPE Default Value: loadbalancer","title":"registry_service_type"},{"location":"roles/registry/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: registry_storage_class: ibmc-block-gold registry_storage_capacity: 500Gb registry_service_type: loadbalancer roles: - ibm.mas_airgap.registry","title":"Example Playbook"},{"location":"roles/registry/#license","text":"EPL-2.0","title":"License"},{"location":"roles/simulate_network/","text":"simulate_network \uf0c1 Our goal is to modify the hosts file on each node (worker and master) to add a bogus entry that breaks DNS resolution for all the registries that we are going to mirror. This will simulate the cluster running in an air gap configuration, although network access will be possible elsewhere, the cluster will be unable to access the docker registries Important The host file (on Fyre) will look something like this, this role is (for now anyway) mainly focused on simulating an air gap cluster in Fyre, it may work on other cluster providers but that can not be guaranteed and may require modifications depending on the specific way OpenShift is set up. oc get nodes oc debug node/node1 sh-4.4# more /host/etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 172.30.55.8 image-registry.openshift-image-registry.svc image-registry.openshift-image-registry.svc.cluster.local # openshift-generated-node-resolver","title":"simulate_network"},{"location":"roles/simulate_network/#simulate_network","text":"Our goal is to modify the hosts file on each node (worker and master) to add a bogus entry that breaks DNS resolution for all the registries that we are going to mirror. This will simulate the cluster running in an air gap configuration, although network access will be possible elsewhere, the cluster will be unable to access the docker registries Important The host file (on Fyre) will look something like this, this role is (for now anyway) mainly focused on simulating an air gap cluster in Fyre, it may work on other cluster providers but that can not be guaranteed and may require modifications depending on the specific way OpenShift is set up. oc get nodes oc debug node/node1 sh-4.4# more /host/etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 172.30.55.8 image-registry.openshift-image-registry.svc image-registry.openshift-image-registry.svc.cluster.local # openshift-generated-node-resolver","title":"simulate_network"}]}