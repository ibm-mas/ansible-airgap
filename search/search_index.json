{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MAS Air Gap Ansible Collection \uf0c1 Extension to ibm.mas_devops providing support for air gap deployments. Important This collection and automation around air gap support is currently a work in progress and is incomplete! 1. Deploy private registry \uf0c1 There are multiple options for setting up your private registry: You can deploy the private registry inside the same OpenShift cluster that you intend to deploy Maximo Application Suite You can deploy the private registry in a seperate OpenShift cluster You can deploy the private registry on a normal server Important Your target OCP cluster for MAS installation must have network access to the location that you set up your prviate container registry. We have provided automation to deploy a private registry inside an OpenShift cluster. You can use this to set up the regsitry in the same cluster that you will deploy MAS, or in a seperate cluster. The easiest way drive the automation is to use the MAS command line container image and run mas setup-registry at the prompt: $ docker run quay.io/ibmmas/installer:1.0.0-pre.master Alternatively you can run the ibm.mas_airgap.registry Ansible role directly if your local machine meets all the required dependencies: export REGISTRY_NAMESPACE=airgap-registry export REGISTRY_STORAGE_CLASS=ibmc-block-gold export REGISTRY_STORAGE_CAPACITY=100Gi export REGISTRY_SERVICE_TYPE=loadbalancer export ROLE_NAME=registry ansible-playbook ibm.mas_airgap.run_role 2. Mirror images \uf0c1 The easiest way drive the automation is to use the MAS command line container image and run mas mirror-images at the prompt: $ docker run quay.io/ibmmas/installer:1.0.0-pre.master This will mirror all (or a subset) container images needed for a MAS installation to your private registry Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PUBLIC_HOST=xxx export REGISTRY_PUBLIC_PORT=xxx ansible-playbook ibm.mas_airgap.mirror_common_services ansible-playbook ibm.mas_airgap.mirror_sls ansible-playbook ibm.mas_airgap.mirror_truststore_mgr ansible-playbook ibm.mas_airgap.mirror_mas_core ROLE_NAME=thirdparty_mirror ansible-playbook ibm.mas_airgap.run_role 3. Configure the target OCP cluster \uf0c1 The easiest way drive the automation is to use the MAS command line container image and run mas configure-airgap at the prompt: $ docker run quay.io/ibmmas/installer:1.0.0-pre.master This will configure your target OCP cluster to use a private docker register, install the operator catalogs required by MAS from that mirror, and install the necessary configmaps to instruct a MAS instance to use image digests instead of image tags so that image mirroring works. Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PRIVATE_HOST=xxx export REGISTRY_PRIVATE_PORT=xxx export REGISTRY_PRIVATE_CA_FILE=xxx export MAS_INSTANCE_ID=xxx ROLE_NAME=ocp_contentsourcepolicy ansible-playbook ibm.mas_airgap.run_role ROLE_NAME=catalogs ansible-playbook ibm.mas_airgap.run_role ROLE_NAME=install_digest_cm ansible-playbook ibm.mas_airgap.run_role 4. Install Maximo Application Suite \uf0c1 mas install will install MAS, deploying the OpenShift Pipelines operator into your cluster & using it to launch the suite installation pipeline. Alternatively, review the ibm.mas_devops documentation for full details of the options available for installing MAS using Ansible.","title":"Home"},{"location":"#mas-air-gap-ansible-collection","text":"Extension to ibm.mas_devops providing support for air gap deployments. Important This collection and automation around air gap support is currently a work in progress and is incomplete!","title":"MAS Air Gap Ansible Collection"},{"location":"#1-deploy-private-registry","text":"There are multiple options for setting up your private registry: You can deploy the private registry inside the same OpenShift cluster that you intend to deploy Maximo Application Suite You can deploy the private registry in a seperate OpenShift cluster You can deploy the private registry on a normal server Important Your target OCP cluster for MAS installation must have network access to the location that you set up your prviate container registry. We have provided automation to deploy a private registry inside an OpenShift cluster. You can use this to set up the regsitry in the same cluster that you will deploy MAS, or in a seperate cluster. The easiest way drive the automation is to use the MAS command line container image and run mas setup-registry at the prompt: $ docker run quay.io/ibmmas/installer:1.0.0-pre.master Alternatively you can run the ibm.mas_airgap.registry Ansible role directly if your local machine meets all the required dependencies: export REGISTRY_NAMESPACE=airgap-registry export REGISTRY_STORAGE_CLASS=ibmc-block-gold export REGISTRY_STORAGE_CAPACITY=100Gi export REGISTRY_SERVICE_TYPE=loadbalancer export ROLE_NAME=registry ansible-playbook ibm.mas_airgap.run_role","title":"1. Deploy private registry"},{"location":"#2-mirror-images","text":"The easiest way drive the automation is to use the MAS command line container image and run mas mirror-images at the prompt: $ docker run quay.io/ibmmas/installer:1.0.0-pre.master This will mirror all (or a subset) container images needed for a MAS installation to your private registry Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PUBLIC_HOST=xxx export REGISTRY_PUBLIC_PORT=xxx ansible-playbook ibm.mas_airgap.mirror_common_services ansible-playbook ibm.mas_airgap.mirror_sls ansible-playbook ibm.mas_airgap.mirror_truststore_mgr ansible-playbook ibm.mas_airgap.mirror_mas_core ROLE_NAME=thirdparty_mirror ansible-playbook ibm.mas_airgap.run_role","title":"2. Mirror images"},{"location":"#3-configure-the-target-ocp-cluster","text":"The easiest way drive the automation is to use the MAS command line container image and run mas configure-airgap at the prompt: $ docker run quay.io/ibmmas/installer:1.0.0-pre.master This will configure your target OCP cluster to use a private docker register, install the operator catalogs required by MAS from that mirror, and install the necessary configmaps to instruct a MAS instance to use image digests instead of image tags so that image mirroring works. Alternatively you can run the following Ansible playbooks directly if your local machine meets all the required dependencies: export REGISTRY_PRIVATE_HOST=xxx export REGISTRY_PRIVATE_PORT=xxx export REGISTRY_PRIVATE_CA_FILE=xxx export MAS_INSTANCE_ID=xxx ROLE_NAME=ocp_contentsourcepolicy ansible-playbook ibm.mas_airgap.run_role ROLE_NAME=catalogs ansible-playbook ibm.mas_airgap.run_role ROLE_NAME=install_digest_cm ansible-playbook ibm.mas_airgap.run_role","title":"3. Configure the target OCP cluster"},{"location":"#4-install-maximo-application-suite","text":"mas install will install MAS, deploying the OpenShift Pipelines operator into your cluster & using it to launch the suite installation pipeline. Alternatively, review the ibm.mas_devops documentation for full details of the options available for installing MAS using Ansible.","title":"4. Install Maximo Application Suite"},{"location":"changes/","text":"Changes \uf0c1 1.2 Additional mirror playbooks ( #26 ) 1.1 Multiple updates: Add case_prepare and case_mirror roles ( #3 ) Add mirror_truststore_mgr playbook ( #12 ) Support cluster configuration for air gap ( #13 ) Add simulate_network role ( #16 ) Add playbook to mirror UDS images ( #19 ) Add role to install digest configmaps ( #18 ) Add basic auth to registry ( #22 ) 1.0 Initial release ( #2 )","title":"Changes"},{"location":"changes/#changes","text":"1.2 Additional mirror playbooks ( #26 ) 1.1 Multiple updates: Add case_prepare and case_mirror roles ( #3 ) Add mirror_truststore_mgr playbook ( #12 ) Support cluster configuration for air gap ( #13 ) Add simulate_network role ( #16 ) Add playbook to mirror UDS images ( #19 ) Add role to install digest configmaps ( #18 ) Add basic auth to registry ( #22 ) 1.0 Initial release ( #2 )","title":"Changes"},{"location":"roles/case_mirror/","text":"case_mirror \uf0c1 This role uses the specifed CASE bundle to mirror container images to a mirror registry and configure the cluster to pull images from this mirror. When mirroring is complete, you can view the content of your registry: curl -k https://$REGISTRY_PUBLIC_HOST/v2/_catalog | jq Requirements \uf0c1 cloudctl tool must be installed Role Variables \uf0c1 case_name the name of the CASE bundle to be installed case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_inventory_name :` the name of the Setup inventory within the CASE bundle ibm_entitlement_key the entitlement key for mirroring container images from cp.icr.io registry_public_host the public hostname for the target registry (defaults to the value of the REGISTRY_PUBLIC_HOST environment variable) Example Playbook \uf0c1 - hosts: localhost vars: case_name: ibm-mas case_bundle_dir: /tmp/casebundle case_inventory_name: \"ibmMasSetup\" registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud:32500 roles: - ibm.mas_airgap.case_mirror License \uf0c1 EPL-2.0","title":"case_mirror"},{"location":"roles/case_mirror/#case_mirror","text":"This role uses the specifed CASE bundle to mirror container images to a mirror registry and configure the cluster to pull images from this mirror. When mirroring is complete, you can view the content of your registry: curl -k https://$REGISTRY_PUBLIC_HOST/v2/_catalog | jq","title":"case_mirror"},{"location":"roles/case_mirror/#requirements","text":"cloudctl tool must be installed","title":"Requirements"},{"location":"roles/case_mirror/#role-variables","text":"case_name the name of the CASE bundle to be installed case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_inventory_name :` the name of the Setup inventory within the CASE bundle ibm_entitlement_key the entitlement key for mirroring container images from cp.icr.io registry_public_host the public hostname for the target registry (defaults to the value of the REGISTRY_PUBLIC_HOST environment variable)","title":"Role Variables"},{"location":"roles/case_mirror/#example-playbook","text":"- hosts: localhost vars: case_name: ibm-mas case_bundle_dir: /tmp/casebundle case_inventory_name: \"ibmMasSetup\" registry_public_host: myocp-5f1320191125833da1cac8216c06779e-0000.us-south.containers.appdomain.cloud:32500 roles: - ibm.mas_airgap.case_mirror","title":"Example Playbook"},{"location":"roles/case_mirror/#license","text":"EPL-2.0","title":"License"},{"location":"roles/case_prepare/","text":"case_prepare \uf0c1 Prepare the specified CASE bundle for airgap installation. It can download the CASE bundle from an internet archive or take a case bundle in a local directory. !!! IMPORTANT The contents of the directory specified by $DEV_AIRGAP_CHANGES are copied over the $CASE_BUNDLE_DIR, so the sub-directory structure of the two should match. e.g. $ tree $DEV_AIRGAP_CHANGES /Users/paulstone/GitHub/ibm-mas-case/dev-airgap-changes \u251c\u2500\u2500 archive \u2502 \u251c\u2500\u2500 ibm-mas-8.5.0-pre.issue-7078a-test-images.csv \u2502 \u2514\u2500\u2500 ibm-truststore-mgr-1.0.0-images.csv \u2514\u2500\u2500 case \u2514\u2500\u2500 ibm-mas \u2514\u2500\u2500 inventory \u2514\u2500\u2500 ibmMasSetup \u2514\u2500\u2500 files \u2514\u2500\u2500 image-map.yaml Requirements \uf0c1 cloudctl tool must be installed Role Variables \uf0c1 case_name the name of the CASE bundle to be installed case_version the version of the CASE bundle case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_source Optional URL of the case bundle archive to download must be .tgz format dev_overrides a directory containing development specific files to override the production CASE bundle Example Playbook \uf0c1 - hosts: localhost vars: case_name: \"ibm-mas\" case_version: \"8.7.2\" case_source: \"https://github.com/IBM/cloud-pak/blob/master/repo/case/{{case_name}}/{{case_version}}/{{case_name}}-{{case_version}}.tgz?raw=true\" case_bundle_dir: \"/tmp/ibm-mas-bundle/\" roles: - ibm.mas_airgap.case_prepare License \uf0c1 EPL-2.0","title":"case_prepare"},{"location":"roles/case_prepare/#case_prepare","text":"Prepare the specified CASE bundle for airgap installation. It can download the CASE bundle from an internet archive or take a case bundle in a local directory. !!! IMPORTANT The contents of the directory specified by $DEV_AIRGAP_CHANGES are copied over the $CASE_BUNDLE_DIR, so the sub-directory structure of the two should match. e.g. $ tree $DEV_AIRGAP_CHANGES /Users/paulstone/GitHub/ibm-mas-case/dev-airgap-changes \u251c\u2500\u2500 archive \u2502 \u251c\u2500\u2500 ibm-mas-8.5.0-pre.issue-7078a-test-images.csv \u2502 \u2514\u2500\u2500 ibm-truststore-mgr-1.0.0-images.csv \u2514\u2500\u2500 case \u2514\u2500\u2500 ibm-mas \u2514\u2500\u2500 inventory \u2514\u2500\u2500 ibmMasSetup \u2514\u2500\u2500 files \u2514\u2500\u2500 image-map.yaml","title":"case_prepare"},{"location":"roles/case_prepare/#requirements","text":"cloudctl tool must be installed","title":"Requirements"},{"location":"roles/case_prepare/#role-variables","text":"case_name the name of the CASE bundle to be installed case_version the version of the CASE bundle case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_source Optional URL of the case bundle archive to download must be .tgz format dev_overrides a directory containing development specific files to override the production CASE bundle","title":"Role Variables"},{"location":"roles/case_prepare/#example-playbook","text":"- hosts: localhost vars: case_name: \"ibm-mas\" case_version: \"8.7.2\" case_source: \"https://github.com/IBM/cloud-pak/blob/master/repo/case/{{case_name}}/{{case_version}}/{{case_name}}-{{case_version}}.tgz?raw=true\" case_bundle_dir: \"/tmp/ibm-mas-bundle/\" roles: - ibm.mas_airgap.case_prepare","title":"Example Playbook"},{"location":"roles/case_prepare/#license","text":"EPL-2.0","title":"License"},{"location":"roles/catalogs/","text":"case_install_catalog \uf0c1 TODO: Write Me!","title":"catalogs"},{"location":"roles/catalogs/#case_install_catalog","text":"TODO: Write Me!","title":"case_install_catalog"},{"location":"roles/ocp_contentsourcepolicy/","text":"ocp_contentsourcepolicies \uf0c1 TODO: Write me! Warning This doesn't work on IBMCloud ROKS. IBM Cloud RedHat OpenShift Service does not implement support for ImageContentSourcePolicies . If you want to use image mirroring you must manually configure each worker node individually using the IBM Cloud command line tool.","title":"ocp_contentsourcepolicy"},{"location":"roles/ocp_contentsourcepolicy/#ocp_contentsourcepolicies","text":"TODO: Write me! Warning This doesn't work on IBMCloud ROKS. IBM Cloud RedHat OpenShift Service does not implement support for ImageContentSourcePolicies . If you want to use image mirroring you must manually configure each worker node individually using the IBM Cloud command line tool.","title":"ocp_contentsourcepolicies"},{"location":"roles/registry/","text":"registry \uf0c1 Create a Docker Registry running on RedHat OpenShift cluster. The registry will be backed by persistant storage, and accessible via either a clusterIP or loadbalancer service. Usage \uf0c1 If you set up the registry with a loadbalancer service you will be able to push to the registry via the cluster's hostname, but before you can use the registry you will need to install the registry's CA certificate and restart the Docker daemon so that your client trusts the new registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo echo \"$CACERT\" > /etc/docker/certs.d/$DOMAIN\\:32500/ca.crt sudo service docker restart You can now use the registry as normal: DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal $DOMAIN:32500/ubi8/ubi-minimal docker push $DOMAIN:32500/ubi8/ubi-minimal If you set up the registry with a clusterip service you will only be able to push to the registry after using port forwarding: oc -n airgap-registry port-forward deployment/airgap-registry 9000:5000 docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal localhost:9000/ubi8/ubi-minimal docker push localhost:9000/ubi8/ubi-minimal However, you will still need to set up Docker trust for the \"local\" registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo mkdir /etc/docker/certs.d/localhost\\:9000 sudo echo \"$CACERT\" > /etc/docker/certs.d/localhost\\:9000/ca.crt sudo service docker restart Role Variables \uf0c1 registry_namespace \uf0c1 The namespace where the registry to run Optional Environment Variable: REGISTRY_NAMESPACE Default Value: airgap-registry registry_storage_class \uf0c1 Required. The name of the storage class to configure the MongoDb operator to use for persistent storage in the MongoDb cluster. Required , unless running in IBM Cloud ROKS, where the storage class will default to ibmc-block-gold . Environment Variable: REGISTRY_STORAGE_CLASS Default Value: None registry_storage_capacity \uf0c1 The size of the PVC that will be created for data storage in the cluster. Optional Environment Variable: REGISTRY_STORAGE_CAPACITY Default Value: 100Gi registry_service_type \uf0c1 The type of service to set up in front of the registry, either loadbalancer or clusterip . Using loadbalancer will allow you to access the registry from outside of your cluster via the cluster domain on port 32500 . If you have other loadbalancers on the cluster that already claim port 32500 this role can not be usedbecause currently the loadbalancer port can not be customised. Optional Environment Variable: REGISTRY_SERVICE_TYPE Default Value: loadbalancer Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: registry_storage_class: ibmc-block-gold registry_storage_capacity: 500Gb registry_service_type: loadbalancer roles: - ibm.mas_airgap.registry License \uf0c1 EPL-2.0","title":"registry"},{"location":"roles/registry/#registry","text":"Create a Docker Registry running on RedHat OpenShift cluster. The registry will be backed by persistant storage, and accessible via either a clusterIP or loadbalancer service.","title":"registry"},{"location":"roles/registry/#usage","text":"If you set up the registry with a loadbalancer service you will be able to push to the registry via the cluster's hostname, but before you can use the registry you will need to install the registry's CA certificate and restart the Docker daemon so that your client trusts the new registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo echo \"$CACERT\" > /etc/docker/certs.d/$DOMAIN\\:32500/ca.crt sudo service docker restart You can now use the registry as normal: DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal $DOMAIN:32500/ubi8/ubi-minimal docker push $DOMAIN:32500/ubi8/ubi-minimal If you set up the registry with a clusterip service you will only be able to push to the registry after using port forwarding: oc -n airgap-registry port-forward deployment/airgap-registry 9000:5000 docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal localhost:9000/ubi8/ubi-minimal docker push localhost:9000/ubi8/ubi-minimal However, you will still need to set up Docker trust for the \"local\" registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo mkdir /etc/docker/certs.d/localhost\\:9000 sudo echo \"$CACERT\" > /etc/docker/certs.d/localhost\\:9000/ca.crt sudo service docker restart","title":"Usage"},{"location":"roles/registry/#role-variables","text":"","title":"Role Variables"},{"location":"roles/registry/#registry_namespace","text":"The namespace where the registry to run Optional Environment Variable: REGISTRY_NAMESPACE Default Value: airgap-registry","title":"registry_namespace"},{"location":"roles/registry/#registry_storage_class","text":"Required. The name of the storage class to configure the MongoDb operator to use for persistent storage in the MongoDb cluster. Required , unless running in IBM Cloud ROKS, where the storage class will default to ibmc-block-gold . Environment Variable: REGISTRY_STORAGE_CLASS Default Value: None","title":"registry_storage_class"},{"location":"roles/registry/#registry_storage_capacity","text":"The size of the PVC that will be created for data storage in the cluster. Optional Environment Variable: REGISTRY_STORAGE_CAPACITY Default Value: 100Gi","title":"registry_storage_capacity"},{"location":"roles/registry/#registry_service_type","text":"The type of service to set up in front of the registry, either loadbalancer or clusterip . Using loadbalancer will allow you to access the registry from outside of your cluster via the cluster domain on port 32500 . If you have other loadbalancers on the cluster that already claim port 32500 this role can not be usedbecause currently the loadbalancer port can not be customised. Optional Environment Variable: REGISTRY_SERVICE_TYPE Default Value: loadbalancer","title":"registry_service_type"},{"location":"roles/registry/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: registry_storage_class: ibmc-block-gold registry_storage_capacity: 500Gb registry_service_type: loadbalancer roles: - ibm.mas_airgap.registry","title":"Example Playbook"},{"location":"roles/registry/#license","text":"EPL-2.0","title":"License"},{"location":"roles/thirdparty_mirror/","text":"thirdparty_mirror \uf0c1 TODO: Write Me!","title":"thirdparty_mirror"},{"location":"roles/thirdparty_mirror/#thirdparty_mirror","text":"TODO: Write Me!","title":"thirdparty_mirror"}]}