{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MAS Air Gap Ansible Collection \uf0c1 Extension to ibm.mas_devops providing support for air gap deployments.","title":"Home"},{"location":"#mas-air-gap-ansible-collection","text":"Extension to ibm.mas_devops providing support for air gap deployments.","title":"MAS Air Gap Ansible Collection"},{"location":"changes/","text":"Changes \uf0c1 1.1 Add case_prepare and case_mirror roles ( #3 ) 1.0 Initial release ( #2 )","title":"Changes"},{"location":"changes/#changes","text":"1.1 Add case_prepare and case_mirror roles ( #3 ) 1.0 Initial release ( #2 )","title":"Changes"},{"location":"roles/registry/","text":"registry \uf0c1 Create a Docker Registry running on RedHat OpenShift cluster. The registry will be backed by persistant storage, and accessible via either a clusterIP or loadbalancer service. Usage \uf0c1 If you set up the registry with a loadbalancer service you will be able to push to the registry via the cluster's hostname, but before you can use the registry you will need to install the registry's CA certificate and restart the Docker daemon so that your client trusts the new registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo echo \"$CACERT\" > /etc/docker/certs.d/$DOMAIN\\:32500/ca.crt sudo service docker restart You can now use the registry as normal: DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal $DOMAIN:32500/ubi8/ubi-minimal docker push $DOMAIN:32500/ubi8/ubi-minimal If you set up the registry with a clusterip service you will only be able to push to the registry after using port forwarding: oc -n airgap-registry port-forward deployment/airgap-registry 9000:5000 docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal localhost:9000/ubi8/ubi-minimal docker push localhost:9000/ubi8/ubi-minimal However, you will still need to set up Docker trust for the \"local\" registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo mkdir /etc/docker/certs.d/localhost\\:9000 sudo echo \"$CACERT\" > /etc/docker/certs.d/localhost\\:9000/ca.crt sudo service docker restart Role Variables \uf0c1 registry_namespace \uf0c1 The namespace where the registry to run Optional Environment Variable: REGISTRY_NAMESPACE Default Value: airgap-registry registry_storage_class \uf0c1 Required. The name of the storage class to configure the MongoDb operator to use for persistent storage in the MongoDb cluster. Required , unless running in IBM Cloud ROKS, where the storage class will default to ibmc-block-gold . Environment Variable: REGISTRY_STORAGE_CLASS Default Value: None registry_storage_capacity \uf0c1 The size of the PVC that will be created for data storage in the cluster. Optional Environment Variable: REGISTRY_STORAGE_CAPACITY Default Value: 100Gi registry_service_type \uf0c1 The type of service to set up in front of the registry, either loadbalancer or clusterip . Using loadbalancer will allow you to access the registry from outside of your cluster via the cluster domain on port 32500 . If you have other loadbalancers on the cluster that already claim port 32500 this role can not be usedbecause currently the loadbalancer port can not be customised. Optional Environment Variable: REGISTRY_SERVICE_TYPE Default Value: loadbalancer Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: registry_storage_class: ibmc-block-gold registry_storage_capacity: 500Gb registry_service_type: loadbalancer roles: - ibm.mas_airgap.registry License \uf0c1 EPL-2.0","title":"registry"},{"location":"roles/registry/#registry","text":"Create a Docker Registry running on RedHat OpenShift cluster. The registry will be backed by persistant storage, and accessible via either a clusterIP or loadbalancer service.","title":"registry"},{"location":"roles/registry/#usage","text":"If you set up the registry with a loadbalancer service you will be able to push to the registry via the cluster's hostname, but before you can use the registry you will need to install the registry's CA certificate and restart the Docker daemon so that your client trusts the new registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo echo \"$CACERT\" > /etc/docker/certs.d/$DOMAIN\\:32500/ca.crt sudo service docker restart You can now use the registry as normal: DOMAIN=$(oc get ingress.config cluster -o jsonpath='{.spec.domain}') docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal $DOMAIN:32500/ubi8/ubi-minimal docker push $DOMAIN:32500/ubi8/ubi-minimal If you set up the registry with a clusterip service you will only be able to push to the registry after using port forwarding: oc -n airgap-registry port-forward deployment/airgap-registry 9000:5000 docker pull registry.access.redhat.com/ubi8/ubi-minimal docker tag registry.access.redhat.com/ubi8/ubi-minimal localhost:9000/ubi8/ubi-minimal docker push localhost:9000/ubi8/ubi-minimal However, you will still need to set up Docker trust for the \"local\" registry: CACERT=$(oc -n airgap-registry get secret airgap-registry-certificate -o jsonpath='{.data.ca\\.crt}' | base64 -d) sudo mkdir -p /etc/docker/certs.d/$DOMAIN\\:32500/ sudo mkdir /etc/docker/certs.d/localhost\\:9000 sudo echo \"$CACERT\" > /etc/docker/certs.d/localhost\\:9000/ca.crt sudo service docker restart","title":"Usage"},{"location":"roles/registry/#role-variables","text":"","title":"Role Variables"},{"location":"roles/registry/#registry_namespace","text":"The namespace where the registry to run Optional Environment Variable: REGISTRY_NAMESPACE Default Value: airgap-registry","title":"registry_namespace"},{"location":"roles/registry/#registry_storage_class","text":"Required. The name of the storage class to configure the MongoDb operator to use for persistent storage in the MongoDb cluster. Required , unless running in IBM Cloud ROKS, where the storage class will default to ibmc-block-gold . Environment Variable: REGISTRY_STORAGE_CLASS Default Value: None","title":"registry_storage_class"},{"location":"roles/registry/#registry_storage_capacity","text":"The size of the PVC that will be created for data storage in the cluster. Optional Environment Variable: REGISTRY_STORAGE_CAPACITY Default Value: 100Gi","title":"registry_storage_capacity"},{"location":"roles/registry/#registry_service_type","text":"The type of service to set up in front of the registry, either loadbalancer or clusterip . Using loadbalancer will allow you to access the registry from outside of your cluster via the cluster domain on port 32500 . If you have other loadbalancers on the cluster that already claim port 32500 this role can not be usedbecause currently the loadbalancer port can not be customised. Optional Environment Variable: REGISTRY_SERVICE_TYPE Default Value: loadbalancer","title":"registry_service_type"},{"location":"roles/registry/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: registry_storage_class: ibmc-block-gold registry_storage_capacity: 500Gb registry_service_type: loadbalancer roles: - ibm.mas_airgap.registry","title":"Example Playbook"},{"location":"roles/registry/#license","text":"EPL-2.0","title":"License"}]}